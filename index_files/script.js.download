function setLang(lang) {
  let date = new Date();
  date.setFullYear(date.getFullYear() + 2);
  document.cookie='lang=' + lang + '; domain=.namemc.com; path=/; expires=' + date.toUTCString();
  return true;
}

function setTheme(theme) {
  let date = new Date();
  date.setFullYear(date.getFullYear() + 2);
  document.cookie='theme=' + theme + '; domain=.namemc.com; path=/; expires=' + date.toUTCString();
  return true;
}


function dismissTranslateAlert() {
  let date = new Date();
  date.setFullYear(date.getFullYear() + 2);
  document.cookie = 'dismiss_translate_alert=true; domain=.namemc.com; path=/; expires=' + date.toUTCString();
  return true;
}

function dismissBlockManiaAlert() {
  document.cookie = 'dismiss_blockmania_alert=true; domain=.namemc.com; path=/; expires=' + new Date(Date.now() + 2.592e+9).toUTCString();
  return true;
}

function dismissCookieAlert() {
  let date = new Date();
  date.setFullYear(date.getFullYear() + 2);
  document.cookie = 'dismiss_cookie_alert=true; domain=.namemc.com; path=/; expires=' + date.toUTCString();
  return false;
}

const $window = $(window);
const $document = $(document);

function handleFixedAd($fixed) {
  if ($fixed.length === 1) {
    let topOffset = $fixed.offset().top;
    function adjust () {
      $fixed.toggleClass('fixed', $window.width() >= 1200 && $window.scrollTop() > topOffset);
      $fixed.toggleClass('absolute', $window.width() < 1200 || $window.scrollTop() <= topOffset);
    }
    $document.ready(adjust);
    $window.scroll(adjust);
    $window.resize(adjust);
  }
}

//handleFixedAd($('#nn_skinl'));
//handleFixedAd($('#nn_skinr'));

$('.auto-size').each(function (i, e) {
  let originalWidth = $(e).width();
  let inverseAspect = $(e).height() / originalWidth;
  function resize() {
    let width = Math.min(originalWidth, $(e).parent().width());
    $(e).css('width', width + 'px');
    $(e).css('height', (width * inverseAspect) + 'px');
  }
  $document.ready(resize);
  $window.resize(resize);
});

function formatTimezoneOffset(time) {
  let offset = time.getTimezoneOffset();
  let sign;
  if (offset > 0) {
    sign = 'âˆ’';
  } else {
    sign = '+';
    offset = -offset;
  }
  let hourOffset = Math.floor(offset / 60);
  let minuteOffset = offset - 60 * hourOffset;

  return '(UTC' + sign + (hourOffset <= 9 ? '0' : '') + hourOffset + ':' + (minuteOffset <= 9 ? '0' : '') + minuteOffset + ')';
}

function localizeTimes() {
  $('time').each(function (i, e) {
    let time = new Date(e.getAttribute('datetime'));
    switch (e.getAttribute('data-type')) {
      case 'date':
        e.textContent = time.toLocaleDateString();
        break;
      case 'time':
        e.textContent = time.toLocaleTimeString();
        break;
      case 'timezone':
        e.textContent = formatTimezoneOffset(time);
        break;
      default:
        e.textContent = time.toLocaleString();
    }
  });

  $('.title-time').each(function (i, e) {
    let title = e.getAttribute('title');
    if (title) {
      let time = new Date(title);
      e.setAttribute('title', time.toLocaleDateString() + ' @ ' + time.toLocaleTimeString());
    }
  });
}

function startTimer(e, now) {
  let dateString = e.attr('data-datetime');
  let dU = e.attr('data-day-unit')    || 'd';
  let hU = e.attr('data-hour-unit')   || 'h';
  let mU = e.attr('data-minute-unit') || 'm;';
  let sU = e.attr('data-second-unit') || 's';
  let updateTitle = e.attr('data-update-title');

  if (!dateString) return;

  let date = Date.parse(dateString);
  let title = document.title;

  let step = function () {
    let secondsRemaining = Math.round((date - now()) / 1000);
    if (secondsRemaining <= 0) secondsRemaining = 0;

    let s = secondsRemaining;
    let d = Math.floor(s / (60 * 60 * 24));
    s -= d * (60 * 60 * 24);
    let h = Math.floor(s / (60 * 60));
    s -= h * (60 * 60);
    let m = Math.floor(s / 60);
    s -= m * 60;

    let text;
    if (d) {
      text = `${d}${dU} ${h.toString().padStart(2, '0')}${hU} ${m.toString().padStart(2, '0')}${mU} ${s.toString().padStart(2, '0')}${sU}`;
    } else if (h) {
      text = `${h}${hU} ${m.toString().padStart(2, '0')}${mU} ${s.toString().padStart(2, '0')}${sU}`;
    } else if (m) {
      text = `${m}${mU} ${s.toString().padStart(2, '0')}${sU}`;
    } else {
      text = `${s}${sU}`;
    }

    e.text(text);

    if (updateTitle) {
      document.title = `[${text}] ${title}`;
    }

    if (secondsRemaining > 0) {
      setTimeout(step, 1000 - (now() % 1000));
    } else {
      $('#status-bar').removeClass('bg-info').addClass('bg-success');
    }
  };

  step();
}

function countdown(currentTime) {
  let offset = currentTime - Date.now();
  let now = function () { return Date.now() + offset; };
  $('.countdown-timer').each(function (i, e) { startTimer($(e), now); });
}

function scaleSkinsToDevice() {
  if (window.devicePixelRatio && window.devicePixelRatio !== 1.0) {
    $('.skin-3d').each(function (i, e) {
      $(e).attr('width', $(e).width() * window.devicePixelRatio);
      $(e).attr('height', $(e).height() * window.devicePixelRatio);
    });
  }

  $('img.auto-size').each(function (i, e) {
    if ($(e).attr('data-src')) {
      $(e).attr('src', $(e).attr('data-src')
        .replace(/width=[0-9]+/, 'width=' + Math.round($(e).width() * Math.min(2.0, window.devicePixelRatio || 1.0)))
        .replace(/height=[0-9]+/, 'height=' + Math.round($(e).height() * Math.min(2.0, window.devicePixelRatio || 1.0))));
    }
  });
}

localizeTimes();
scaleSkinsToDevice();
